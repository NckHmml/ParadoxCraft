#define INSCATTER_SPHERICAL_INTEGRAL_SAMPLES 8
#define AVERAGE_GROUND_REFLECTANCE 0.1f

class Outscatter : InscatterBase // appropriate name: InscatterS, InscatterSpherical?
{
    static const float dphi = Utilities.PI / INSCATTER_SPHERICAL_INTEGRAL_SAMPLES;
    static const float dtheta = Utilities.PI / INSCATTER_SPHERICAL_INTEGRAL_SAMPLES;

    override float4 Compute(float altitude, float viewZenith, float sunZenith, float viewSun)
    {
        altitude = clamp(altitude, GroundHeight, TopHeight);
        viewZenith = clamp(viewZenith, -1.0, 1.0);
        sunZenith = clamp(sunZenith, -1.0, 1.0);

        float vari = sqrt(1.0 - viewZenith * viewZenith) * sqrt(1.0 - sunZenith * sunZenith);
        viewSun = clamp(viewSun, sunZenith * viewZenith - vari, sunZenith * viewZenith + vari);

        float cosHorizon = -sqrt(1.0 - ((GroundHeight * GroundHeight) / (altitude * altitude)));

        float3 view = float3(sqrt(1.0 - viewZenith * viewZenith), 0.0, viewZenith);
        float sx = view.x == 0.0 ? 0.0 : (viewSun - sunZenith * viewZenith) / view.x;
        float3 sun = float3(sx, sqrt(max(0.0, 1.0 - sx * sx - sunZenith * sunZenith)), sunZenith);

        float3 result = 0;

        // integral over 4.Pi around current position with two nested loops 
        // over w directions (theta,phi)
        for (int i = 0; i < INSCATTER_SPHERICAL_INTEGRAL_SAMPLES; i++)
        {
            float theta = (0.5 + i) * dtheta;
            float ctheta = cos(theta);

            float greflectance = 0;
            float dground = 0;
            float3 gtransp = 0;

            // check if ground visible 
            if (ctheta < cosHorizon)
            {
                greflectance = AVERAGE_GROUND_REFLECTANCE / Utilities.PI;
                dground = -altitude * ctheta - sqrt(altitude * altitude * (ctheta * ctheta - 1.0f) + GroundHeight * GroundHeight);
                //gtransp = GetTransmittance(altitude, ctheta, dground);
                gtransp = GetTransmittance(GroundHeight, -(altitude * ctheta + dground) / GroundHeight, dground);
            }

            // Inner loop described in Listing 4-22 
            for (int j = 0; j < 2 * INSCATTER_SPHERICAL_INTEGRAL_SAMPLES; j++)
            {
                float phi = (0.5 + j) * dphi;
                float3 w = float3(cos(phi) * sin(theta), sin(phi) * sin(theta), ctheta);
                float dw = dtheta * dphi * sin(theta);

                float nu1 = dot(sun, w);
                float nu2 = dot(view, w);
                float pr2 = RayleighPhaseFunction(nu2);
                float pm2 = MiePhaseFunction(nu2);

                // compute irradiance incident to surface point in direction w 
                float3 gnormal = (float3(0.0, 0.0, altitude) + dground * w) / GroundHeight;
                float3 girradiance = GetIrradiance(DeltaE, GroundHeight, dot(gnormal, sun));

                // light incident to current position from direction w 
                // first term = light reflected from the ground and attenuated before 
                // reaching current position 
                float3 raymie1 = greflectance * girradiance * gtransp;
            
                // second term = in-scattered light 
                if (IsFirst)
                {
                    // first iteration => introduce phase functions 
                    float pr1 = RayleighPhaseFunction(nu1);
                    float pm1 = MiePhaseFunction(nu1);
                    float3 ray1 = GetInscatter(DeltaSR, altitude, w.z, sunZenith, nu1).rgb;
                    float3 mie1 = GetInscatter(DeltaSM, altitude, w.z, sunZenith, nu1).rgb;
                    raymie1 += ray1 * pr1 + mie1 * pm1;
                }
                else
                {
                    raymie1 += GetInscatter(DeltaSR, altitude, w.z, sunZenith, nu1).rgb;
                }

                // light coming from direction w and scattered in direction v 
                result += raymie1 * dw *
                    (RayleighExtinction * pr2 * exp(-(altitude - GroundHeight) / RayleighScaleHeight) +
                    MieScattering * pm2 * exp(-(altitude - GroundHeight) / MieScaleHeight) * pm2);
            }
        }

        return float4(result, 0);
    }
};